const fs = require('fs');
const cheerio = require('cheerio');

// 删除除了第一个子元素之外的所有子元素，适用于向上做最新一期的站
// 删除除第一个子元素之外的所有子元素，并插入指定的子元素作为最前的子元素
// 依照 父元素ID表来删除子元素，如遍历HTML文件没有父元素ID表的ID，则不需要操作
// 依照 父元素的ID以及映射表(idToTargetSelectorMap)来插入子元素

// 删除除了最后一个子元素之外的所有子元素，适用于向下做最新一期的站
// 删除除最后一个子元素之外的所有子元素，并插入指定的子元素作为最后的子元素
// 依照 父元素ID表来删除子元素，如遍历HTML文件没有父元素ID表的ID，则不需要操作
// 依照 父元素的ID以及映射表(idToTargetSelectorMap)来插入子元素

// 读取HTML文件
const htmlContent = fs.readFileSync('./t.html', 'utf8');
const $ = cheerio.load(htmlContent);

// 遍历所有table
$('table').each((index, table) => {
    const $table = $(table);
    let consecutiveErrors = 0;
    let shouldReplace = false;

    // 遍历table中的所有子元素
    $table.find('.del3w').each((i, elem) => {
        const text = $(elem).text().trim();
        if (text.includes('错')) {
            consecutiveErrors++;
            if (consecutiveErrors > 2) {
                shouldReplace = true;
                return false;
            }
        } else {
            consecutiveErrors = 0;
        }
    });

    if (shouldReplace) {
        // 删除所有子元素
        $table.empty();

        // 从模板文件中读取内容
        const templateContent = fs.readFileSync('./xx.html', 'utf8');
        const $template = cheerio.load(templateContent);

        // 假设你要复制整个模板的内容到这个table中
        $table.append($template('table').html());
    }
});

// 保存修改后的HTML文件
fs.writeFileSync('./tt.html', $.html(), 'utf8');
